문제 :

  0~9 사이의 정수 n개를 빠짐없이 한 번씩만 써서 두 개의 자연수를 만들 수 있습니다.
  예를 들어, 숫자 목록 1, 2, 4, 7, 9가 있다면 (149, 27), (124, 79), (1, 9742)… 처럼 많은 자연수 조합이 가능합니다.
  이렇게 만든 두 개의 자연수의 합이 최소가 되는 쌍을 찾아 그 합을 구하세요.

  조건
  1. 입력받는 숫자의 개수는 2≤n≤18 사이입니다.
  2. 당연한 이야기지만, 숫자를 조합할 때 맨 앞자리에 0이 오게 해서는 안됩니다.
  3. 입력받은 숫자로 자연수를 두 개 만들 수 없는 경우도 있습니다. 이 때의 결과값은 -1이 됩니다.
  4. 숫자를 입력받는 방식은 어떻게 구현해도 상관없습니다.
    4-1. 외부 파일으로부터 읽어오기
    4-2. 콘솔 터미널에서 직접 입력받기
    4-3. 소스 내 하드코딩(!!)
    
  입력
  한 줄은 숫자 목록 하나 입니다. 각 숫자는 콤마 또는 공백으로 구분되어 있습니다. 다음은 입력 예입니다.
  1, 2, 4, 7, 9
  1, 2, 3, 1, 2, 3
  1, 2, 3, 4, 5, 6, 7
  0, 1, 2, 3, 0, 1, 2, 3, 4
  0, 0, 1
  
  출력
  숫자 목록을 이용해 만든 두 자연수의 합의 최솟값을 각 줄에 하나씩 출력합니다. 위 예의 출력은 아래와 같습니다.
  176
  246
  1603
  11257
  -1

  출처) 사이냅소프트 채용퀴즈

  아래 정답란에는..
  숫자 목록 0, 0, 1, 8, 2, 2, 8, 9, 0, 3, 4, 0, 0을 이용해 만든 두 자연수 합의 최솟값을 구하여 제출하세요.

정답 : 
package quiz;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class Quiz2 {

	public static void main(String[] args) {

		Quiz2 q = new Quiz2();

		List<Integer> list = q.stringToList();
		
		if(list == null) {
			return;
		}
		// 입력받은 List를 2개의 배열로 나누기 위해서 새로운 리스트를 생성
		List<Integer> divide1 = new ArrayList<>();
		List<Integer> divide2 = new ArrayList<>();

		// 나눈 리스트의 배열에서 조합된 숫자를 저장할 변수
		int one;
		int two;

		// 크기 비교
		if (q.checkSize(list) == false) {
			System.out.println("크기 오류");
			return;
		}

		Collections.sort(list); // 입력받은 List를 오름차순으로 정렬

		// 리스트의 값들을 각각 리스트에 저장
		for (int x = 0; x < list.size(); x++) {
			Boolean y = (x % 2 == 0) ? divide1.add(list.get(x)) : divide2.add(list.get(x));
		}

		// list가 0만 포함하고 있는지 검사.
		if ((q.check0(divide1) == false) || (q.check0(divide2) == false)) {
			System.out.println(-1);
			return;
		}

		// 두 개의 list의 값 중 최솟값을 구하기
		System.out.println(q.plusNum(divide1, divide2));

	}

	// list의 크기가 맞는지 확인하는 메서드
	private boolean checkSize(List<Integer> list) {
		int num = list.size();
		boolean isT = (num >= 2) & (num <= 18);
		if (isT == false) {
			return false;
		}
		return true;
	}

	// 0만 포함하고 있는 리스트 검사하는 메서드
	private boolean check0(List<Integer> list) {
		List<Integer> test1 = new ArrayList<>(list);

		List<Integer> compare = new ArrayList<>();

		test1.removeIf(n -> (n == 0));

		if (test1.equals(compare)) {
			return false;
		} else {
			return true;
		}
	}

	// list의 값을 하나의 자연수로 바꿔주는 메서드
	private int listToInt(List<Integer> list) {
		int result = 0;
		int count = 0;

		for (int x = 0; x < list.size(); x++) {
			if (list.get(x) != 0) {
				count = x;
				break;
			}
		}

		if (count != 0) {
			int change = list.get(count);
			list.remove(count);
			list.add(0, change);
			String a = "";

			for (int x : list) {
				a += String.valueOf(x);
			}
			result = Integer.parseInt(a);

		} else {
			String a = "";
			for (int x : list) {
				a += String.valueOf(x);
			}
			result = Integer.parseInt(a);
		}

		return result;
	}
	
	// 입력받은 list 2개의 값을 각각 2개의 자연수로 바꾼 뒤 더하는 메서드
	private int plusNum(List<Integer> list1, List<Integer> list2) {
		return this.listToInt(list1) + this.listToInt(list2);
	}
	
	private List<Integer> stringToList (){

		Scanner sc = new Scanner(System.in);
		String input = sc.next();
		String[] inputs = input.split(",");
		List<Integer> toInt  = new ArrayList<>();
		
		try {
			for(String x : inputs) {
				int a = Integer.parseInt(x);
				toInt.add(a);
			}
		} catch (Exception e) {
			System.out.println("정수와 ','를 이용하여 입력해주세요.");
			return null;
		}
		
		return toInt;
	}
	
}
